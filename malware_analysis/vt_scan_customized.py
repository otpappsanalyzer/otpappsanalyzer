import os 
import json
from vt_work import search_vt_report,vt_upload,vt_find_positive
import time
import pandas as pd 

vt_result_path = '/home/budi/OTP_project/vt_result/'
apps_list = '/home/budi/OTP_project/OTP_code/metadata/csv_apk_id.csv'
apps_path = '/home/budi/OTP_project/apk_list/'
report_path = '/home/budi/OTP_project/OTP_code/malware_analysis'

def check_vt_status(item,vt_report_path):
    for roots,dirs,files in os.walk(vt_report_path):
        if item in files:
            return True
        else:
            return False

def isFileSizeLessthan32MB(path):
    if os.path.getsize(path) < 32000000:
        return True
    else:
        return False

def write_to_csv(file_name,file_path):
    to_write = pd.DataFrame(file_name)
    to_write.to_csv(file_path,index=False)

def main():
    exceed_32mb_list =[]
    vt_positive_result_list = []
    with open(apps_list,'r') as app_list:
        for item in app_list:
            item = item.strip('\n')
            vt_status = check_vt_status(item,vt_result_path)
            vt_result_apk_path = vt_result_path+item
            if vt_status == False:
                apk_path = apps_path+item+'.apk'
                res = search_vt_report(apk_path)
                # no_result = 'queued or pending'
                try:
                    if res['response_code']==0:
                        if isFileSizeLessthan32MB == True:
                            upload_res = vt_upload(apk_path)
                            print(upload_res)
                        else:
                            print('The File size is exceeding 32 MB')
                            exceed_32mb_list.append(item)
                    else:
                        print('Write result to disk :'+item)
                        with open (vt_result_apk_path,'w') as vtj:
                            try:
                                json.dump(res,vtj)
                            except:
                                print('Cannot decode to json format')
                except:
                    print(res)
            else:
                vt_positive = vt_find_positive(vt_result_apk_path)
                for positive in vt_positive:
                    app_id = {'app_id':item}
                    item_positive = dict(app_id,**positive)
                    vt_positive_result_list.append(item_positive)
            time.sleep(10)

    """ Summarizing detail virus total positive result"""
    vt_detail_path = report_path+'vt_positive_detail.csv'
    print(vt_detail_path)
    # write_to_csv(vt_positive_result_list,vt_detail_path)

    """ Summarizing positive virus total per apps"""
    vt_sum_per_app = report_path+'vt_sum_per_app.csv'
    df_vt = pd.DataFrame(vt_positive_result_list)
    vt_per_app = df_vt.groupby(['app_id'])['app_id'].count().reset_index(name='count')
    print(vt_per_app)
    # write_to_csv(vt_per_app,vt_sum_per_app)
   

if __name__ == '__main__':
    main()